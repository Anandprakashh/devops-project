name: Release: multi-arch build, test, publish, release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-push-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      issues: write
      actions: read
    env:
      IMAGE_REPO_LC: ${{ github.repository_owner }}/${{ github.event.repository.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image names
        id: image
        run: |
          repo_lc="${IMAGE_REPO_LC,,}"
          tag="${GITHUB_REF_NAME}"
          echo "image=ghcr.io/${repo_lc}:${tag}" >> $GITHUB_OUTPUT
          echo "image_latest=ghcr.io/${repo_lc}:latest" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.image.outputs.image }}
            ${{ steps.image.outputs.image_latest }}

      - name: Smoke / integration test (optional)
        if: ${{ env.SMOKE_TEST != 'false' && env.SMOKE_TEST != '' }}
        env:
          IMAGE: ${{ steps.image.outputs.image }}
        run: |
          TEST_CMD="${SMOKE_TEST:-curl -fsS http://localhost:8080/health || exit 1}"
          container_id=$(docker run -d -p 8080:8080 --rm --name smoke_test_runner "$IMAGE")
          for i in $(seq 1 20); do
            if $TEST_CMD; then
              echo "Smoke test passed"
              break
            fi
            sleep 2
            if [ "$i" -eq 20 ]; then
              echo "Smoke test failed"
              docker logs "$container_id" || true
              docker rm -f "$container_id" || true
              exit 1
            fi
          done
          docker rm -f "$container_id" || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
